# -*- coding: utf-8 -*-
"""Insurance cost.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12hem3ukS0A8zra_ZGr9w1C8dv0ST17qs
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/insurance.csv')

df.head()

df.info()

df.describe()

sns.heatmap(df.corr())

df.dtypes

df['charges'] = df['charges'].astype(int)

df['bmi'] = df['bmi'].astype(int)

cr= df.corr()
cr_df= cr['charges'].sort_values(ascending= False)
cr_df

df.hist(bins=20, figsize =(15,10), color= 'maroon')

df['sex'].unique()

df['smoker'].unique()



df['sex']= df['sex'].replace({'female': 0, 'male': 1})
df['smoker']= df['smoker'].replace({'no': 0, 'yes': 1})

df.head()

df.dtypes

cr= df.corr()
cr_df= cr['charges'].sort_values(ascending= False)
cr_df

sns.histplot(df['age'], color='maroon', kde=True, bins='auto', alpha=0.5, fill=True)

sns.histplot(df['bmi'], color='maroon', kde=True, bins='auto', alpha=0.5, fill=True)



sns.histplot(df['charges'], color='maroon', kde=True, bins='auto', alpha=0.5, fill=True)

sns.histplot(df['children'], color='maroon', kde=True, bins='auto', alpha=0.5, fill=True)

sns.scatterplot(x="smoker",
                    y="charges",


                    data=df)

sns.scatterplot(x="bmi",
                    y="charges",


                    data=df)

sns.scatterplot(x="children",
                    y="charges",
                    data=df)

age_bins = [0, 15, 30, 45, 60, 99]
age_labels = ["0-15", "15-30", "30-45", "45-60", "60+"]

df["age_group"] = pd.cut(df["age"], bins=age_bins, labels=age_labels, right=False)

df.head()

bmi_bins = [0, 18.5, 24.9, 29.9, float('inf')]
bmi_labels = ["underweight", "normal weight", "overweight", "obese"]

df["bmi_group"] = pd.cut(df["bmi"], bins=bmi_bins, labels=bmi_labels, right=False)

df.head()

avg_regioncharges = df.groupby('region')["charges"].mean(numeric_only=True)

avg_regioncharges

avg_regioncharges1 = df.groupby('region')["charges"].median(numeric_only=True)

avg_regioncharges1

avg_regioncharges.plot(kind="bar")
plt.xlabel("Region")
plt.ylabel("Average Charges")
plt.title("Average Charges per Region")
plt.show()

age_avg_charges = df.groupby('age_group')["charges"].mean(numeric_only=True)

age_avg_charges

age_avg_charges.plot(kind="bar")
plt.xlabel("Age Group")
plt.ylabel("Average Charges")
plt.title("Average Charges per Age group")
plt.show()

avg_charges_bmi_group = df.groupby("bmi_group")["charges"].mean(numeric_only=True)

avg_charges_bmi_group

avg_charges_bmi_group.plot(kind="bar")
plt.xlabel("BMI Group")
plt.ylabel("Average Charges")
plt.title("Average Charges per BMI group")
plt.show()

df.head()

df.dtypes

df = df.astype({
    "age_group": "object",
    "bmi_group": "object"
})

df['bmi_group'].unique()

df['bmi_group']= df['bmi_group'].replace({'underweight': 0, 'normal weight': 1, 'overweight': 2, 'obese':3})

df['age_group'].unique()

df['age_group']= df['age_group'].replace({'15-30': 0, '30-45': 1, '45-60': 2, '60+':3})

df.dtypes

df.head()

df= pd.get_dummies(columns= ['region'], data= df)

df.head()

df.dtypes

df = df.astype({
    "region_northeast": "int64",
    "region_northwest": "int64",
    "region_southeast": "int64",
    "region_southwest": "int64"
})

df.dtypes

from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import explained_variance_score,mean_absolute_error,r2_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.metrics import accuracy_score
import math

X = df.drop('charges', axis=1)
y = df['charges']


# Split the dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=0)

lr= LinearRegression()
lr.fit(X_train, y_train)

y_pred= lr.predict(X_test)

#  accuracy_score= accuracy_score(y_test, y_pred)

mse = mean_squared_error(y_test, y_pred)
r2_square = r2_score(y_test,y_pred)
print(f" R-squared: {r2_square}")
print(f'Mean Squared Error: {mse}')

RMSE = math.sqrt(mse)
print("Root Mean Square Error:")
print(RMSE)

lr1= LogisticRegression(max_iter=1000)
lr1.fit(X_train, y_train)

y_pred2= lr1.predict(X_test)

# accuracy= accuracy_score(y_test, y_pred)
# accuracy

mse = mean_squared_error(y_test, y_pred2)
r2_square = r2_score(y_test,y_pred2)
print(f" R-squared: {r2_square}")
print(f'Mean Squared Error: {mse}')
RMSE = math.sqrt(mse)
print("Root Mean Square Error:")
print(RMSE)

rf= RandomForestRegressor(max_depth= 5)
rf.fit(X_train, y_train)

y_pred3= rf.predict(X_test)

mse = mean_squared_error(y_test, y_pred3)
r2_square = r2_score(y_test,y_pred3)
print(f" R-squared: {r2_square}")
print(f'Mean Squared Error: {mse}')

RMSE = math.sqrt(mse)
print("Root Mean Square Error:")
print(RMSE)

dtc= DecisionTreeRegressor()
dtc.fit(X_train, y_train)

y_pred4= dtc.predict(X_test)

mse = mean_squared_error(y_test, y_pred4)
r2_square = r2_score(y_test,y_pred4)
print(f" R-squared: {r2_square}")
print(f'Mean Squared Error: {mse}')
RMSE = math.sqrt(mse)
print("Root Mean Square Error:")
print(RMSE)

gb= GradientBoostingRegressor()
gb.fit(X_train, y_train)

y_pred5=gb.predict(X_test)

mse = mean_squared_error(y_test, y_pred5)
r2_square = r2_score(y_test,y_pred5)
print(f" R-squared: {r2_square}")
print(f'Mean Squared Error: {mse}')

RMSE = math.sqrt(mse)
print("Root Mean Square Error:")
print(RMSE)

knn=KNeighborsRegressor()
knn.fit(X_train,y_train)

y_pred6=knn.predict(X_test)

mse = mean_squared_error(y_test, y_pred6)
r2_square = r2_score(y_test,y_pred6)
print(f" R-squared: {r2_square}")
print(f'Mean Squared Error: {mse}')
RMSE = math.sqrt(mse)
print("Root Mean Square Error:")
print(RMSE)

clf= RandomForestClassifier()
clf.fit(X_train, y_train)

y_pred7= clf.predict(X_test)

accuracy= accuracy_score(y_test, y_pred7)
accuracy

# clf1= GradientBoostingClassifier()
# clf1.fit(X_train, y_train)

y_pred8= clf.predict(X_test)

accuracy= accuracy_score(y_test, y_pred8)
accuracy